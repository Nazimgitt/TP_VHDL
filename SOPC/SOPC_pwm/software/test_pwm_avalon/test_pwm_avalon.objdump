
test_pwm_avalon.elf:     file format elf32-littlenios2
test_pwm_avalon.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000012bc memsz 0x000012bc flags r-x
    LOAD off    0x000022dc vaddr 0x000092dc paddr 0x000092e0 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000022e4 vaddr 0x000092e4 paddr 0x000092e4 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001194  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  000091b4  000091b4  000021b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  000092dc  000092e0  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  000092e4  000092e4  000022e4  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00002308  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000436  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f4b  00000000  00000000  00002aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000018ad  00000000  00000000  000059f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000034a6  00000000  00000000  0000729e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000484  00000000  00000000  0000a744  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000963  00000000  00000000  0000abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000cb1  00000000  00000000  0000b52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0000c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000218  00000000  00000000  0000c220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000d592  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  0000d595  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000d59a  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000d59b  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000d59f  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000d5a3  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0000d5a7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0000d5b2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000d5bd  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000d5c8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000002e  00000000  00000000  0000d5d0  2**0
                  CONTENTS, READONLY
 27 .jdi          00004246  00000000  00000000  0000d5fe  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
000091b4 l    d  .rodata	00000000 .rodata
000092dc l    d  .rwdata	00000000 .rwdata
000092e4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000081dc l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00008e60 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009068 l     F .text	0000007c udivmodsi4
00008eec g     F .text	0000002c alt_main
000092e0 g       *ABS*	00000000 __flash_rwdata_start
00008674 g     F .text	00000174 __divsf3
00008860 g     F .text	00000094 __fixsfsi
00008f18 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000092e8 g     O .bss	00000004 alt_argv
000112dc g       *ABS*	00000000 _gp
00008f50 g     F .text	00000004 usleep
000083c0 g     F .text	00000070 __subsf3
00009040 g     F .text	00000008 altera_nios2_irq_init
000091a4 g     F .text	00000008 __udivsi3
000092f0 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_saram
00008cb8 g     F .text	000000c8 __unpack_f
00009038 g     F .text	00000004 alt_dcache_flush_all
000092e0 g       *ABS*	00000000 __ram_rwdata_end
000092dc g       *ABS*	00000000 __ram_rodata_end
000092dc g     O .rwdata	00000004 jtag_uart_0
000091ac g     F .text	00000008 __umodsi3
000092f0 g       *ABS*	00000000 end
00008b58 g     F .text	00000160 __pack_f
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008ad8 g     F .text	00000080 __clzsi2
00008f78 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008f54 g     F .text	00000004 alt_sys_init
00008e28 g     F .text	00000038 __mulsi3
000092dc g       *ABS*	00000000 __ram_rwdata_start
000091b4 g       *ABS*	00000000 __ram_rodata_start
00008fac g     F .text	0000008c alt_busy_sleep
000092f0 g       *ABS*	00000000 __alt_stack_base
000091cc g     O .rodata	00000010 __thenan_sf
000092e4 g       *ABS*	00000000 __bss_start
0000805c g     F .text	00000110 main
000092ec g     O .bss	00000004 alt_envp
000090e4 g     F .text	00000060 __divsi3
00008494 g     F .text	000001e0 __mulsf3
000091b4 g       *ABS*	00000000 __flash_rodata_start
00008f58 g     F .text	00000020 alt_irq_init
000091dc g     O .rodata	00000100 __clz_tab
000087e8 g     F .text	00000078 __gesf2
000092e4 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000092e0 g       *ABS*	00000000 _edata
000092f0 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
000088f4 g     F .text	000000c0 __floatunsisf
00009144 g     F .text	00000060 __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000816c g     F .text	00000070 __fixunssfsi
00008d80 g     F .text	000000a8 __fpcmp_parts_f
0000800c g       .entry	00000000 _exit
000089b4 g     F .text	00000124 __muldi3
00009048 g     F .text	00000020 strlen
0000903c g     F .text	00000004 alt_icache_flush_all
00008430 g     F .text	00000064 __addsf3
00008e80 g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d684b714 	ori	gp,gp,4828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a4b914 	ori	r2,r2,37604

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e4bc14 	ori	r3,r3,37616

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008e800 	call	8e80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008eec0 	call	8eec <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:




int main()
{ 
    805c:	defffa04 	addi	sp,sp,-24
	float t_on,f_on;
	float t_off;
  alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21246d04 	addi	r4,r4,-28236




int main()
{ 
    8068:	dfc00515 	stw	ra,20(sp)
    806c:	dd000415 	stw	r20,16(sp)
    8070:	dcc00315 	stw	r19,12(sp)
    8074:	dc800215 	stw	r18,8(sp)
    8078:	dc400115 	stw	r17,4(sp)
    807c:	dc000015 	stw	r16,0(sp)
	float t_on,f_on;
	float t_off;
  alt_putstr("Hello from Nios II!\n");
    8080:	0008f180 	call	8f18 <alt_putstr>

  *freq = 0x5; //0x2FAF080; //0x0400; // divise clk par 250000 pour avoir la valeur de la freq anemo= 200hz
    8084:	04000144 	movi	r16,5
    8088:	00800074 	movhi	r2,1
    808c:	10840004 	addi	r2,r2,4096
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%
    8090:	04400c84 	movi	r17,50
{ 
	float t_on,f_on;
	float t_off;
  alt_putstr("Hello from Nios II!\n");

  *freq = 0x5; //0x2FAF080; //0x0400; // divise clk par 250000 pour avoir la valeur de la freq anemo= 200hz
    8094:	14000015 	stw	r16,0(r2)
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%
    8098:	10800104 	addi	r2,r2,4

t_on = *duty;
    809c:	8809883a 	mov	r4,r17
	float t_on,f_on;
	float t_off;
  alt_putstr("Hello from Nios II!\n");

  *freq = 0x5; //0x2FAF080; //0x0400; // divise clk par 250000 pour avoir la valeur de la freq anemo= 200hz
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%
    80a0:	14400015 	stw	r17,0(r2)

t_on = *duty;
    80a4:	00088f40 	call	88f4 <__floatunsisf>
t_on = t_on/100;
f_on = *freq;
    80a8:	8009883a 	mov	r4,r16
  alt_putstr("Hello from Nios II!\n");

  *freq = 0x5; //0x2FAF080; //0x0400; // divise clk par 250000 pour avoir la valeur de la freq anemo= 200hz
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%

t_on = *duty;
    80ac:	1025883a 	mov	r18,r2
t_on = t_on/100;
f_on = *freq;
f_on= 1/f_on;
    80b0:	050fe034 	movhi	r20,16256
  *freq = 0x5; //0x2FAF080; //0x0400; // divise clk par 250000 pour avoir la valeur de la freq anemo= 200hz
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%

t_on = *duty;
t_on = t_on/100;
f_on = *freq;
    80b4:	00088f40 	call	88f4 <__floatunsisf>
f_on= 1/f_on;
    80b8:	100b883a 	mov	r5,r2
    80bc:	a009883a 	mov	r4,r20
    80c0:	00086740 	call	8674 <__divsf3>
t_on=f_on*t_on*1e6;
    80c4:	9009883a 	mov	r4,r18
    80c8:	0150b234 	movhi	r5,17096
  *duty = 0x32;   //0x17D7840;  //0x0200 // RC = 50%

t_on = *duty;
t_on = t_on/100;
f_on = *freq;
f_on= 1/f_on;
    80cc:	1027883a 	mov	r19,r2
t_on=f_on*t_on*1e6;
    80d0:	00086740 	call	8674 <__divsf3>
    80d4:	100b883a 	mov	r5,r2
    80d8:	9809883a 	mov	r4,r19
    80dc:	00084940 	call	8494 <__mulsf3>
    80e0:	04125d34 	movhi	r16,18804
    80e4:	84090004 	addi	r16,r16,9216
    80e8:	800b883a 	mov	r5,r16
    80ec:	1009883a 	mov	r4,r2
    80f0:	00084940 	call	8494 <__mulsf3>

t_off = *duty;
t_off = 1-t_off/100;

t_off=f_on*t_off*1e6;
    80f4:	8809883a 	mov	r4,r17

t_on = *duty;
t_on = t_on/100;
f_on = *freq;
f_on= 1/f_on;
t_on=f_on*t_on*1e6;
    80f8:	1025883a 	mov	r18,r2

t_off = *duty;
t_off = 1-t_off/100;

t_off=f_on*t_off*1e6;
    80fc:	00088f40 	call	88f4 <__floatunsisf>
    8100:	1009883a 	mov	r4,r2
    8104:	0170b234 	movhi	r5,49864
    8108:	00086740 	call	8674 <__divsf3>
    810c:	1009883a 	mov	r4,r2
    8110:	a00b883a 	mov	r5,r20
    8114:	00084300 	call	8430 <__addsf3>
    8118:	100b883a 	mov	r5,r2
    811c:	9809883a 	mov	r4,r19
    8120:	00084940 	call	8494 <__mulsf3>
    8124:	1009883a 	mov	r4,r2
    8128:	800b883a 	mov	r5,r16
    812c:	00084940 	call	8494 <__mulsf3>
    8130:	1023883a 	mov	r17,r2


   /* Event loop never exits. */
  while (1)
  {
	 *leds=0xff;
    8134:	04000074 	movhi	r16,1
    8138:	84040404 	addi	r16,r16,4112
    813c:	00803fc4 	movi	r2,255
	  usleep(t_on);
    8140:	9009883a 	mov	r4,r18


   /* Event loop never exits. */
  while (1)
  {
	 *leds=0xff;
    8144:	80800015 	stw	r2,0(r16)
	  usleep(t_on);
    8148:	000816c0 	call	816c <__fixunssfsi>
    814c:	1009883a 	mov	r4,r2
    8150:	0008f500 	call	8f50 <usleep>
	  *leds=0x00;
	   usleep(t_off);
    8154:	8809883a 	mov	r4,r17
   /* Event loop never exits. */
  while (1)
  {
	 *leds=0xff;
	  usleep(t_on);
	  *leds=0x00;
    8158:	80000015 	stw	zero,0(r16)
	   usleep(t_off);
    815c:	000816c0 	call	816c <__fixunssfsi>
    8160:	1009883a 	mov	r4,r2
    8164:	0008f500 	call	8f50 <usleep>
    8168:	003ff206 	br	8134 <main+0xd8>

0000816c <__fixunssfsi>:
    816c:	defffd04 	addi	sp,sp,-12
    8170:	dc000015 	stw	r16,0(sp)
    8174:	0413c034 	movhi	r16,20224
    8178:	800b883a 	mov	r5,r16
    817c:	dc400115 	stw	r17,4(sp)
    8180:	dfc00215 	stw	ra,8(sp)
    8184:	2023883a 	mov	r17,r4
    8188:	00087e80 	call	87e8 <__gesf2>
    818c:	800b883a 	mov	r5,r16
    8190:	8809883a 	mov	r4,r17
    8194:	10000a16 	blt	r2,zero,81c0 <__fixunssfsi+0x54>
    8198:	00083c00 	call	83c0 <__subsf3>
    819c:	1009883a 	mov	r4,r2
    81a0:	00088600 	call	8860 <__fixsfsi>
    81a4:	00e00034 	movhi	r3,32768
    81a8:	10c5883a 	add	r2,r2,r3
    81ac:	dfc00217 	ldw	ra,8(sp)
    81b0:	dc400117 	ldw	r17,4(sp)
    81b4:	dc000017 	ldw	r16,0(sp)
    81b8:	dec00304 	addi	sp,sp,12
    81bc:	f800283a 	ret
    81c0:	8809883a 	mov	r4,r17
    81c4:	00088600 	call	8860 <__fixsfsi>
    81c8:	dfc00217 	ldw	ra,8(sp)
    81cc:	dc400117 	ldw	r17,4(sp)
    81d0:	dc000017 	ldw	r16,0(sp)
    81d4:	dec00304 	addi	sp,sp,12
    81d8:	f800283a 	ret

000081dc <_fpadd_parts>:
    81dc:	21c00017 	ldw	r7,0(r4)
    81e0:	02000044 	movi	r8,1
    81e4:	41c0332e 	bgeu	r8,r7,82b4 <_fpadd_parts+0xd8>
    81e8:	28800017 	ldw	r2,0(r5)
    81ec:	4080462e 	bgeu	r8,r2,8308 <_fpadd_parts+0x12c>
    81f0:	00c00104 	movi	r3,4
    81f4:	38c06b26 	beq	r7,r3,83a4 <_fpadd_parts+0x1c8>
    81f8:	10c04326 	beq	r2,r3,8308 <_fpadd_parts+0x12c>
    81fc:	00c00084 	movi	r3,2
    8200:	10c02e26 	beq	r2,r3,82bc <_fpadd_parts+0xe0>
    8204:	38c04026 	beq	r7,r3,8308 <_fpadd_parts+0x12c>
    8208:	22800217 	ldw	r10,8(r4)
    820c:	28c00217 	ldw	r3,8(r5)
    8210:	23000317 	ldw	r12,12(r4)
    8214:	2a400317 	ldw	r9,12(r5)
    8218:	50cfc83a 	sub	r7,r10,r3
    821c:	3817883a 	mov	r11,r7
    8220:	38004f16 	blt	r7,zero,8360 <_fpadd_parts+0x184>
    8224:	008007c4 	movi	r2,31
    8228:	11c03316 	blt	r2,r7,82f8 <_fpadd_parts+0x11c>
    822c:	02c0540e 	bge	zero,r11,8380 <_fpadd_parts+0x1a4>
    8230:	41c4983a 	sll	r2,r8,r7
    8234:	49c6d83a 	srl	r3,r9,r7
    8238:	10bfffc4 	addi	r2,r2,-1
    823c:	4884703a 	and	r2,r9,r2
    8240:	1004c03a 	cmpne	r2,r2,zero
    8244:	1892b03a 	or	r9,r3,r2
    8248:	20c00117 	ldw	r3,4(r4)
    824c:	28800117 	ldw	r2,4(r5)
    8250:	18803c26 	beq	r3,r2,8344 <_fpadd_parts+0x168>
    8254:	18002f26 	beq	r3,zero,8314 <_fpadd_parts+0x138>
    8258:	4b05c83a 	sub	r2,r9,r12
    825c:	10004216 	blt	r2,zero,8368 <_fpadd_parts+0x18c>
    8260:	32800215 	stw	r10,8(r6)
    8264:	30800315 	stw	r2,12(r6)
    8268:	30000115 	stw	zero,4(r6)
    826c:	31000317 	ldw	r4,12(r6)
    8270:	01d00034 	movhi	r7,16384
    8274:	39ffff84 	addi	r7,r7,-2
    8278:	20bfffc4 	addi	r2,r4,-1
    827c:	2007883a 	mov	r3,r4
    8280:	38800836 	bltu	r7,r2,82a4 <_fpadd_parts+0xc8>
    8284:	31400217 	ldw	r5,8(r6)
    8288:	18c9883a 	add	r4,r3,r3
    828c:	20bfffc4 	addi	r2,r4,-1
    8290:	297fffc4 	addi	r5,r5,-1
    8294:	2007883a 	mov	r3,r4
    8298:	38bffb2e 	bgeu	r7,r2,8288 <_fpadd_parts+0xac>
    829c:	31400215 	stw	r5,8(r6)
    82a0:	31000315 	stw	r4,12(r6)
    82a4:	008000c4 	movi	r2,3
    82a8:	30800015 	stw	r2,0(r6)
    82ac:	20001b16 	blt	r4,zero,831c <_fpadd_parts+0x140>
    82b0:	3009883a 	mov	r4,r6
    82b4:	2005883a 	mov	r2,r4
    82b8:	f800283a 	ret
    82bc:	38fffd1e 	bne	r7,r3,82b4 <_fpadd_parts+0xd8>
    82c0:	31c00015 	stw	r7,0(r6)
    82c4:	20800117 	ldw	r2,4(r4)
    82c8:	30800115 	stw	r2,4(r6)
    82cc:	20c00217 	ldw	r3,8(r4)
    82d0:	30c00215 	stw	r3,8(r6)
    82d4:	20800317 	ldw	r2,12(r4)
    82d8:	30800315 	stw	r2,12(r6)
    82dc:	20c00117 	ldw	r3,4(r4)
    82e0:	28800117 	ldw	r2,4(r5)
    82e4:	3009883a 	mov	r4,r6
    82e8:	1886703a 	and	r3,r3,r2
    82ec:	2005883a 	mov	r2,r4
    82f0:	30c00115 	stw	r3,4(r6)
    82f4:	f800283a 	ret
    82f8:	1a801716 	blt	r3,r10,8358 <_fpadd_parts+0x17c>
    82fc:	1815883a 	mov	r10,r3
    8300:	0019883a 	mov	r12,zero
    8304:	003fd006 	br	8248 <_fpadd_parts+0x6c>
    8308:	2809883a 	mov	r4,r5
    830c:	2005883a 	mov	r2,r4
    8310:	f800283a 	ret
    8314:	6245c83a 	sub	r2,r12,r9
    8318:	003fd006 	br	825c <_fpadd_parts+0x80>
    831c:	30800217 	ldw	r2,8(r6)
    8320:	2006d07a 	srli	r3,r4,1
    8324:	2100004c 	andi	r4,r4,1
    8328:	10800044 	addi	r2,r2,1
    832c:	1906b03a 	or	r3,r3,r4
    8330:	3009883a 	mov	r4,r6
    8334:	30800215 	stw	r2,8(r6)
    8338:	2005883a 	mov	r2,r4
    833c:	30c00315 	stw	r3,12(r6)
    8340:	f800283a 	ret
    8344:	4b09883a 	add	r4,r9,r12
    8348:	30c00115 	stw	r3,4(r6)
    834c:	32800215 	stw	r10,8(r6)
    8350:	31000315 	stw	r4,12(r6)
    8354:	003fd306 	br	82a4 <_fpadd_parts+0xc8>
    8358:	0013883a 	mov	r9,zero
    835c:	003fba06 	br	8248 <_fpadd_parts+0x6c>
    8360:	01cfc83a 	sub	r7,zero,r7
    8364:	003faf06 	br	8224 <_fpadd_parts+0x48>
    8368:	0089c83a 	sub	r4,zero,r2
    836c:	00800044 	movi	r2,1
    8370:	30800115 	stw	r2,4(r6)
    8374:	32800215 	stw	r10,8(r6)
    8378:	31000315 	stw	r4,12(r6)
    837c:	003fbb06 	br	826c <_fpadd_parts+0x90>
    8380:	583fb126 	beq	r11,zero,8248 <_fpadd_parts+0x6c>
    8384:	41c4983a 	sll	r2,r8,r7
    8388:	61c6d83a 	srl	r3,r12,r7
    838c:	51d5883a 	add	r10,r10,r7
    8390:	10bfffc4 	addi	r2,r2,-1
    8394:	6084703a 	and	r2,r12,r2
    8398:	1004c03a 	cmpne	r2,r2,zero
    839c:	1898b03a 	or	r12,r3,r2
    83a0:	003fa906 	br	8248 <_fpadd_parts+0x6c>
    83a4:	11ffc31e 	bne	r2,r7,82b4 <_fpadd_parts+0xd8>
    83a8:	28c00117 	ldw	r3,4(r5)
    83ac:	20800117 	ldw	r2,4(r4)
    83b0:	10ffc026 	beq	r2,r3,82b4 <_fpadd_parts+0xd8>
    83b4:	01000074 	movhi	r4,1
    83b8:	21247304 	addi	r4,r4,-28212
    83bc:	003fbd06 	br	82b4 <_fpadd_parts+0xd8>

000083c0 <__subsf3>:
    83c0:	deffef04 	addi	sp,sp,-68
    83c4:	dcc00f15 	stw	r19,60(sp)
    83c8:	dcc00204 	addi	r19,sp,8
    83cc:	dc400e15 	stw	r17,56(sp)
    83d0:	d9000015 	stw	r4,0(sp)
    83d4:	d9400115 	stw	r5,4(sp)
    83d8:	d809883a 	mov	r4,sp
    83dc:	980b883a 	mov	r5,r19
    83e0:	dc400604 	addi	r17,sp,24
    83e4:	dfc01015 	stw	ra,64(sp)
    83e8:	0008cb80 	call	8cb8 <__unpack_f>
    83ec:	d9000104 	addi	r4,sp,4
    83f0:	880b883a 	mov	r5,r17
    83f4:	0008cb80 	call	8cb8 <__unpack_f>
    83f8:	d8800717 	ldw	r2,28(sp)
    83fc:	9809883a 	mov	r4,r19
    8400:	880b883a 	mov	r5,r17
    8404:	d9800a04 	addi	r6,sp,40
    8408:	1080005c 	xori	r2,r2,1
    840c:	d8800715 	stw	r2,28(sp)
    8410:	00081dc0 	call	81dc <_fpadd_parts>
    8414:	1009883a 	mov	r4,r2
    8418:	0008b580 	call	8b58 <__pack_f>
    841c:	dfc01017 	ldw	ra,64(sp)
    8420:	dcc00f17 	ldw	r19,60(sp)
    8424:	dc400e17 	ldw	r17,56(sp)
    8428:	dec01104 	addi	sp,sp,68
    842c:	f800283a 	ret

00008430 <__addsf3>:
    8430:	deffef04 	addi	sp,sp,-68
    8434:	dcc00f15 	stw	r19,60(sp)
    8438:	dcc00204 	addi	r19,sp,8
    843c:	dc400e15 	stw	r17,56(sp)
    8440:	d9000015 	stw	r4,0(sp)
    8444:	d9400115 	stw	r5,4(sp)
    8448:	d809883a 	mov	r4,sp
    844c:	980b883a 	mov	r5,r19
    8450:	dc400604 	addi	r17,sp,24
    8454:	dfc01015 	stw	ra,64(sp)
    8458:	0008cb80 	call	8cb8 <__unpack_f>
    845c:	d9000104 	addi	r4,sp,4
    8460:	880b883a 	mov	r5,r17
    8464:	0008cb80 	call	8cb8 <__unpack_f>
    8468:	d9800a04 	addi	r6,sp,40
    846c:	9809883a 	mov	r4,r19
    8470:	880b883a 	mov	r5,r17
    8474:	00081dc0 	call	81dc <_fpadd_parts>
    8478:	1009883a 	mov	r4,r2
    847c:	0008b580 	call	8b58 <__pack_f>
    8480:	dfc01017 	ldw	ra,64(sp)
    8484:	dcc00f17 	ldw	r19,60(sp)
    8488:	dc400e17 	ldw	r17,56(sp)
    848c:	dec01104 	addi	sp,sp,68
    8490:	f800283a 	ret

00008494 <__mulsf3>:
    8494:	deffef04 	addi	sp,sp,-68
    8498:	dc400f15 	stw	r17,60(sp)
    849c:	dc400204 	addi	r17,sp,8
    84a0:	dc000e15 	stw	r16,56(sp)
    84a4:	d9000015 	stw	r4,0(sp)
    84a8:	d9400115 	stw	r5,4(sp)
    84ac:	d809883a 	mov	r4,sp
    84b0:	880b883a 	mov	r5,r17
    84b4:	dc000604 	addi	r16,sp,24
    84b8:	dfc01015 	stw	ra,64(sp)
    84bc:	0008cb80 	call	8cb8 <__unpack_f>
    84c0:	d9000104 	addi	r4,sp,4
    84c4:	800b883a 	mov	r5,r16
    84c8:	0008cb80 	call	8cb8 <__unpack_f>
    84cc:	d9000217 	ldw	r4,8(sp)
    84d0:	00800044 	movi	r2,1
    84d4:	01400104 	movi	r5,4
    84d8:	1100142e 	bgeu	r2,r4,852c <__mulsf3+0x98>
    84dc:	d8c00617 	ldw	r3,24(sp)
    84e0:	10c0052e 	bgeu	r2,r3,84f8 <__mulsf3+0x64>
    84e4:	21400f26 	beq	r4,r5,8524 <__mulsf3+0x90>
    84e8:	19405d26 	beq	r3,r5,8660 <__mulsf3+0x1cc>
    84ec:	00800084 	movi	r2,2
    84f0:	20800e26 	beq	r4,r2,852c <__mulsf3+0x98>
    84f4:	1880181e 	bne	r3,r2,8558 <__mulsf3+0xc4>
    84f8:	d8c00717 	ldw	r3,28(sp)
    84fc:	d8800317 	ldw	r2,12(sp)
    8500:	8009883a 	mov	r4,r16
    8504:	10c4c03a 	cmpne	r2,r2,r3
    8508:	d8800715 	stw	r2,28(sp)
    850c:	0008b580 	call	8b58 <__pack_f>
    8510:	dfc01017 	ldw	ra,64(sp)
    8514:	dc400f17 	ldw	r17,60(sp)
    8518:	dc000e17 	ldw	r16,56(sp)
    851c:	dec01104 	addi	sp,sp,68
    8520:	f800283a 	ret
    8524:	00800084 	movi	r2,2
    8528:	18804f26 	beq	r3,r2,8668 <__mulsf3+0x1d4>
    852c:	d8800317 	ldw	r2,12(sp)
    8530:	d8c00717 	ldw	r3,28(sp)
    8534:	8809883a 	mov	r4,r17
    8538:	10c4c03a 	cmpne	r2,r2,r3
    853c:	d8800315 	stw	r2,12(sp)
    8540:	0008b580 	call	8b58 <__pack_f>
    8544:	dfc01017 	ldw	ra,64(sp)
    8548:	dc400f17 	ldw	r17,60(sp)
    854c:	dc000e17 	ldw	r16,56(sp)
    8550:	dec01104 	addi	sp,sp,68
    8554:	f800283a 	ret
    8558:	d8800517 	ldw	r2,20(sp)
    855c:	da000917 	ldw	r8,36(sp)
    8560:	0013883a 	mov	r9,zero
    8564:	0007883a 	mov	r3,zero
    8568:	480f883a 	mov	r7,r9
    856c:	180b883a 	mov	r5,r3
    8570:	400d883a 	mov	r6,r8
    8574:	1009883a 	mov	r4,r2
    8578:	00089b40 	call	89b4 <__muldi3>
    857c:	da800417 	ldw	r10,16(sp)
    8580:	d9800817 	ldw	r6,32(sp)
    8584:	da400317 	ldw	r9,12(sp)
    8588:	52800084 	addi	r10,r10,2
    858c:	3295883a 	add	r10,r6,r10
    8590:	d9800717 	ldw	r6,28(sp)
    8594:	180b883a 	mov	r5,r3
    8598:	180f883a 	mov	r7,r3
    859c:	4992c03a 	cmpne	r9,r9,r6
    85a0:	da400b15 	stw	r9,44(sp)
    85a4:	1007883a 	mov	r3,r2
    85a8:	da800c15 	stw	r10,48(sp)
    85ac:	2800070e 	bge	r5,zero,85cc <__mulsf3+0x138>
    85b0:	2880004c 	andi	r2,r5,1
    85b4:	1005003a 	cmpeq	r2,r2,zero
    85b8:	500d883a 	mov	r6,r10
    85bc:	10001e26 	beq	r2,zero,8638 <__mulsf3+0x1a4>
    85c0:	380ed07a 	srli	r7,r7,1
    85c4:	31800044 	addi	r6,r6,1
    85c8:	d9800c15 	stw	r6,48(sp)
    85cc:	01100034 	movhi	r4,16384
    85d0:	213fffc4 	addi	r4,r4,-1
    85d4:	21c00b36 	bltu	r4,r7,8604 <__mulsf3+0x170>
    85d8:	d8800c17 	ldw	r2,48(sp)
    85dc:	00000206 	br	85e8 <__mulsf3+0x154>
    85e0:	18c7883a 	add	r3,r3,r3
    85e4:	21c00636 	bltu	r4,r7,8600 <__mulsf3+0x16c>
    85e8:	10bfffc4 	addi	r2,r2,-1
    85ec:	39cf883a 	add	r7,r7,r7
    85f0:	183ffb0e 	bge	r3,zero,85e0 <__mulsf3+0x14c>
    85f4:	39c00054 	ori	r7,r7,1
    85f8:	18c7883a 	add	r3,r3,r3
    85fc:	21fffa2e 	bgeu	r4,r7,85e8 <__mulsf3+0x154>
    8600:	d8800c15 	stw	r2,48(sp)
    8604:	39001fcc 	andi	r4,r7,127
    8608:	00801004 	movi	r2,64
    860c:	20800d26 	beq	r4,r2,8644 <__mulsf3+0x1b0>
    8610:	008000c4 	movi	r2,3
    8614:	d9000a04 	addi	r4,sp,40
    8618:	d9c00d15 	stw	r7,52(sp)
    861c:	d8800a15 	stw	r2,40(sp)
    8620:	0008b580 	call	8b58 <__pack_f>
    8624:	dfc01017 	ldw	ra,64(sp)
    8628:	dc400f17 	ldw	r17,60(sp)
    862c:	dc000e17 	ldw	r16,56(sp)
    8630:	dec01104 	addi	sp,sp,68
    8634:	f800283a 	ret
    8638:	1804d07a 	srli	r2,r3,1
    863c:	10e00034 	orhi	r3,r2,32768
    8640:	003fdf06 	br	85c0 <__mulsf3+0x12c>
    8644:	3880200c 	andi	r2,r7,128
    8648:	103ff11e 	bne	r2,zero,8610 <__mulsf3+0x17c>
    864c:	183ff026 	beq	r3,zero,8610 <__mulsf3+0x17c>
    8650:	3907883a 	add	r3,r7,r4
    8654:	00bfe004 	movi	r2,-128
    8658:	188e703a 	and	r7,r3,r2
    865c:	003fec06 	br	8610 <__mulsf3+0x17c>
    8660:	00800084 	movi	r2,2
    8664:	20bfa41e 	bne	r4,r2,84f8 <__mulsf3+0x64>
    8668:	01000074 	movhi	r4,1
    866c:	21247304 	addi	r4,r4,-28212
    8670:	003fb306 	br	8540 <__mulsf3+0xac>

00008674 <__divsf3>:
    8674:	defff304 	addi	sp,sp,-52
    8678:	dc400b15 	stw	r17,44(sp)
    867c:	dc400204 	addi	r17,sp,8
    8680:	dc000a15 	stw	r16,40(sp)
    8684:	d9000015 	stw	r4,0(sp)
    8688:	d9400115 	stw	r5,4(sp)
    868c:	d809883a 	mov	r4,sp
    8690:	880b883a 	mov	r5,r17
    8694:	dc000604 	addi	r16,sp,24
    8698:	dfc00c15 	stw	ra,48(sp)
    869c:	0008cb80 	call	8cb8 <__unpack_f>
    86a0:	d9000104 	addi	r4,sp,4
    86a4:	800b883a 	mov	r5,r16
    86a8:	0008cb80 	call	8cb8 <__unpack_f>
    86ac:	d9000217 	ldw	r4,8(sp)
    86b0:	00800044 	movi	r2,1
    86b4:	01800104 	movi	r6,4
    86b8:	11000a2e 	bgeu	r2,r4,86e4 <__divsf3+0x70>
    86bc:	d9400617 	ldw	r5,24(sp)
    86c0:	1140432e 	bgeu	r2,r5,87d0 <__divsf3+0x15c>
    86c4:	d8800317 	ldw	r2,12(sp)
    86c8:	d8c00717 	ldw	r3,28(sp)
    86cc:	10c4f03a 	xor	r2,r2,r3
    86d0:	d8800315 	stw	r2,12(sp)
    86d4:	21800226 	beq	r4,r6,86e0 <__divsf3+0x6c>
    86d8:	00800084 	movi	r2,2
    86dc:	2080101e 	bne	r4,r2,8720 <__divsf3+0xac>
    86e0:	29000726 	beq	r5,r4,8700 <__divsf3+0x8c>
    86e4:	8809883a 	mov	r4,r17
    86e8:	0008b580 	call	8b58 <__pack_f>
    86ec:	dfc00c17 	ldw	ra,48(sp)
    86f0:	dc400b17 	ldw	r17,44(sp)
    86f4:	dc000a17 	ldw	r16,40(sp)
    86f8:	dec00d04 	addi	sp,sp,52
    86fc:	f800283a 	ret
    8700:	01000074 	movhi	r4,1
    8704:	21247304 	addi	r4,r4,-28212
    8708:	0008b580 	call	8b58 <__pack_f>
    870c:	dfc00c17 	ldw	ra,48(sp)
    8710:	dc400b17 	ldw	r17,44(sp)
    8714:	dc000a17 	ldw	r16,40(sp)
    8718:	dec00d04 	addi	sp,sp,52
    871c:	f800283a 	ret
    8720:	29802d26 	beq	r5,r6,87d8 <__divsf3+0x164>
    8724:	28801a26 	beq	r5,r2,8790 <__divsf3+0x11c>
    8728:	d8c00417 	ldw	r3,16(sp)
    872c:	d8800817 	ldw	r2,32(sp)
    8730:	d9000517 	ldw	r4,20(sp)
    8734:	d9800917 	ldw	r6,36(sp)
    8738:	1885c83a 	sub	r2,r3,r2
    873c:	d8800415 	stw	r2,16(sp)
    8740:	2180032e 	bgeu	r4,r6,8750 <__divsf3+0xdc>
    8744:	10bfffc4 	addi	r2,r2,-1
    8748:	d8800415 	stw	r2,16(sp)
    874c:	2109883a 	add	r4,r4,r4
    8750:	01500034 	movhi	r5,16384
    8754:	0007883a 	mov	r3,zero
    8758:	0005883a 	mov	r2,zero
    875c:	01c007c4 	movi	r7,31
    8760:	10800044 	addi	r2,r2,1
    8764:	21800236 	bltu	r4,r6,8770 <__divsf3+0xfc>
    8768:	1946b03a 	or	r3,r3,r5
    876c:	2189c83a 	sub	r4,r4,r6
    8770:	280ad07a 	srli	r5,r5,1
    8774:	2109883a 	add	r4,r4,r4
    8778:	11fff91e 	bne	r2,r7,8760 <__divsf3+0xec>
    877c:	19401fcc 	andi	r5,r3,127
    8780:	00801004 	movi	r2,64
    8784:	28800a26 	beq	r5,r2,87b0 <__divsf3+0x13c>
    8788:	d8c00515 	stw	r3,20(sp)
    878c:	003fd506 	br	86e4 <__divsf3+0x70>
    8790:	8809883a 	mov	r4,r17
    8794:	d9800215 	stw	r6,8(sp)
    8798:	0008b580 	call	8b58 <__pack_f>
    879c:	dfc00c17 	ldw	ra,48(sp)
    87a0:	dc400b17 	ldw	r17,44(sp)
    87a4:	dc000a17 	ldw	r16,40(sp)
    87a8:	dec00d04 	addi	sp,sp,52
    87ac:	f800283a 	ret
    87b0:	1880200c 	andi	r2,r3,128
    87b4:	103ff41e 	bne	r2,zero,8788 <__divsf3+0x114>
    87b8:	203ff326 	beq	r4,zero,8788 <__divsf3+0x114>
    87bc:	1947883a 	add	r3,r3,r5
    87c0:	00bfe004 	movi	r2,-128
    87c4:	1886703a 	and	r3,r3,r2
    87c8:	d8c00515 	stw	r3,20(sp)
    87cc:	003fc506 	br	86e4 <__divsf3+0x70>
    87d0:	8009883a 	mov	r4,r16
    87d4:	003fc406 	br	86e8 <__divsf3+0x74>
    87d8:	8809883a 	mov	r4,r17
    87dc:	d8000515 	stw	zero,20(sp)
    87e0:	d8000415 	stw	zero,16(sp)
    87e4:	003fc006 	br	86e8 <__divsf3+0x74>

000087e8 <__gesf2>:
    87e8:	defff304 	addi	sp,sp,-52
    87ec:	dc400b15 	stw	r17,44(sp)
    87f0:	dc400204 	addi	r17,sp,8
    87f4:	dc000a15 	stw	r16,40(sp)
    87f8:	d9000015 	stw	r4,0(sp)
    87fc:	d9400115 	stw	r5,4(sp)
    8800:	d809883a 	mov	r4,sp
    8804:	880b883a 	mov	r5,r17
    8808:	dc000604 	addi	r16,sp,24
    880c:	dfc00c15 	stw	ra,48(sp)
    8810:	0008cb80 	call	8cb8 <__unpack_f>
    8814:	d9000104 	addi	r4,sp,4
    8818:	800b883a 	mov	r5,r16
    881c:	0008cb80 	call	8cb8 <__unpack_f>
    8820:	d8800217 	ldw	r2,8(sp)
    8824:	00c00044 	movi	r3,1
    8828:	01bfffc4 	movi	r6,-1
    882c:	1880062e 	bgeu	r3,r2,8848 <__gesf2+0x60>
    8830:	d8800617 	ldw	r2,24(sp)
    8834:	8809883a 	mov	r4,r17
    8838:	800b883a 	mov	r5,r16
    883c:	1880022e 	bgeu	r3,r2,8848 <__gesf2+0x60>
    8840:	0008d800 	call	8d80 <__fpcmp_parts_f>
    8844:	100d883a 	mov	r6,r2
    8848:	3005883a 	mov	r2,r6
    884c:	dfc00c17 	ldw	ra,48(sp)
    8850:	dc400b17 	ldw	r17,44(sp)
    8854:	dc000a17 	ldw	r16,40(sp)
    8858:	dec00d04 	addi	sp,sp,52
    885c:	f800283a 	ret

00008860 <__fixsfsi>:
    8860:	defffa04 	addi	sp,sp,-24
    8864:	d9000015 	stw	r4,0(sp)
    8868:	d9400104 	addi	r5,sp,4
    886c:	d809883a 	mov	r4,sp
    8870:	dfc00515 	stw	ra,20(sp)
    8874:	0008cb80 	call	8cb8 <__unpack_f>
    8878:	d8c00117 	ldw	r3,4(sp)
    887c:	00800084 	movi	r2,2
    8880:	1880041e 	bne	r3,r2,8894 <__fixsfsi+0x34>
    8884:	0005883a 	mov	r2,zero
    8888:	dfc00517 	ldw	ra,20(sp)
    888c:	dec00604 	addi	sp,sp,24
    8890:	f800283a 	ret
    8894:	00800044 	movi	r2,1
    8898:	10fffa2e 	bgeu	r2,r3,8884 <__fixsfsi+0x24>
    889c:	00800104 	movi	r2,4
    88a0:	18800426 	beq	r3,r2,88b4 <__fixsfsi+0x54>
    88a4:	d8800317 	ldw	r2,12(sp)
    88a8:	103ff616 	blt	r2,zero,8884 <__fixsfsi+0x24>
    88ac:	00c00784 	movi	r3,30
    88b0:	1880070e 	bge	r3,r2,88d0 <__fixsfsi+0x70>
    88b4:	d8800217 	ldw	r2,8(sp)
    88b8:	10000c1e 	bne	r2,zero,88ec <__fixsfsi+0x8c>
    88bc:	00a00034 	movhi	r2,32768
    88c0:	10bfffc4 	addi	r2,r2,-1
    88c4:	dfc00517 	ldw	ra,20(sp)
    88c8:	dec00604 	addi	sp,sp,24
    88cc:	f800283a 	ret
    88d0:	1885c83a 	sub	r2,r3,r2
    88d4:	d9000217 	ldw	r4,8(sp)
    88d8:	d8c00417 	ldw	r3,16(sp)
    88dc:	1884d83a 	srl	r2,r3,r2
    88e0:	203fe926 	beq	r4,zero,8888 <__fixsfsi+0x28>
    88e4:	0085c83a 	sub	r2,zero,r2
    88e8:	003fe706 	br	8888 <__fixsfsi+0x28>
    88ec:	00a00034 	movhi	r2,32768
    88f0:	003fe506 	br	8888 <__fixsfsi+0x28>

000088f4 <__floatunsisf>:
    88f4:	defff904 	addi	sp,sp,-28
    88f8:	dc400515 	stw	r17,20(sp)
    88fc:	dc000415 	stw	r16,16(sp)
    8900:	dfc00615 	stw	ra,24(sp)
    8904:	04400784 	movi	r17,30
    8908:	2021883a 	mov	r16,r4
    890c:	d8000115 	stw	zero,4(sp)
    8910:	2000091e 	bne	r4,zero,8938 <__floatunsisf+0x44>
    8914:	00800084 	movi	r2,2
    8918:	d8800015 	stw	r2,0(sp)
    891c:	d809883a 	mov	r4,sp
    8920:	0008b580 	call	8b58 <__pack_f>
    8924:	dfc00617 	ldw	ra,24(sp)
    8928:	dc400517 	ldw	r17,20(sp)
    892c:	dc000417 	ldw	r16,16(sp)
    8930:	dec00704 	addi	sp,sp,28
    8934:	f800283a 	ret
    8938:	008000c4 	movi	r2,3
    893c:	d9000315 	stw	r4,12(sp)
    8940:	d8800015 	stw	r2,0(sp)
    8944:	dc400215 	stw	r17,8(sp)
    8948:	0008ad80 	call	8ad8 <__clzsi2>
    894c:	117fffc4 	addi	r5,r2,-1
    8950:	0147c83a 	sub	r3,zero,r5
    8954:	00800044 	movi	r2,1
    8958:	10c4983a 	sll	r2,r2,r3
    895c:	80c6d83a 	srl	r3,r16,r3
    8960:	8949c83a 	sub	r4,r17,r5
    8964:	10bfffc4 	addi	r2,r2,-1
    8968:	8084703a 	and	r2,r16,r2
    896c:	1004c03a 	cmpne	r2,r2,zero
    8970:	1886b03a 	or	r3,r3,r2
    8974:	28000c16 	blt	r5,zero,89a8 <__floatunsisf+0xb4>
    8978:	8144983a 	sll	r2,r16,r5
    897c:	8947c83a 	sub	r3,r17,r5
    8980:	283fe626 	beq	r5,zero,891c <__floatunsisf+0x28>
    8984:	d809883a 	mov	r4,sp
    8988:	d8800315 	stw	r2,12(sp)
    898c:	d8c00215 	stw	r3,8(sp)
    8990:	0008b580 	call	8b58 <__pack_f>
    8994:	dfc00617 	ldw	ra,24(sp)
    8998:	dc400517 	ldw	r17,20(sp)
    899c:	dc000417 	ldw	r16,16(sp)
    89a0:	dec00704 	addi	sp,sp,28
    89a4:	f800283a 	ret
    89a8:	d8c00315 	stw	r3,12(sp)
    89ac:	d9000215 	stw	r4,8(sp)
    89b0:	003fda06 	br	891c <__floatunsisf+0x28>

000089b4 <__muldi3>:
    89b4:	defff204 	addi	sp,sp,-56
    89b8:	df000c15 	stw	fp,48(sp)
    89bc:	3038d43a 	srli	fp,r6,16
    89c0:	dd000815 	stw	r20,32(sp)
    89c4:	dc400515 	stw	r17,20(sp)
    89c8:	2028d43a 	srli	r20,r4,16
    89cc:	247fffcc 	andi	r17,r4,65535
    89d0:	dc000415 	stw	r16,16(sp)
    89d4:	343fffcc 	andi	r16,r6,65535
    89d8:	dcc00715 	stw	r19,28(sp)
    89dc:	d9000015 	stw	r4,0(sp)
    89e0:	2827883a 	mov	r19,r5
    89e4:	8809883a 	mov	r4,r17
    89e8:	d9400115 	stw	r5,4(sp)
    89ec:	800b883a 	mov	r5,r16
    89f0:	d9800215 	stw	r6,8(sp)
    89f4:	dfc00d15 	stw	ra,52(sp)
    89f8:	d9c00315 	stw	r7,12(sp)
    89fc:	dd800a15 	stw	r22,40(sp)
    8a00:	dd400915 	stw	r21,36(sp)
    8a04:	302d883a 	mov	r22,r6
    8a08:	ddc00b15 	stw	r23,44(sp)
    8a0c:	dc800615 	stw	r18,24(sp)
    8a10:	0008e280 	call	8e28 <__mulsi3>
    8a14:	8809883a 	mov	r4,r17
    8a18:	e00b883a 	mov	r5,fp
    8a1c:	102b883a 	mov	r21,r2
    8a20:	0008e280 	call	8e28 <__mulsi3>
    8a24:	800b883a 	mov	r5,r16
    8a28:	a009883a 	mov	r4,r20
    8a2c:	1023883a 	mov	r17,r2
    8a30:	0008e280 	call	8e28 <__mulsi3>
    8a34:	a009883a 	mov	r4,r20
    8a38:	e00b883a 	mov	r5,fp
    8a3c:	1021883a 	mov	r16,r2
    8a40:	0008e280 	call	8e28 <__mulsi3>
    8a44:	a8ffffcc 	andi	r3,r21,65535
    8a48:	a82ad43a 	srli	r21,r21,16
    8a4c:	8c23883a 	add	r17,r17,r16
    8a50:	1011883a 	mov	r8,r2
    8a54:	ac6b883a 	add	r21,r21,r17
    8a58:	a804943a 	slli	r2,r21,16
    8a5c:	b009883a 	mov	r4,r22
    8a60:	980b883a 	mov	r5,r19
    8a64:	10c7883a 	add	r3,r2,r3
    8a68:	a812d43a 	srli	r9,r21,16
    8a6c:	180d883a 	mov	r6,r3
    8a70:	ac00022e 	bgeu	r21,r16,8a7c <__muldi3+0xc8>
    8a74:	00800074 	movhi	r2,1
    8a78:	4091883a 	add	r8,r8,r2
    8a7c:	4267883a 	add	r19,r8,r9
    8a80:	302d883a 	mov	r22,r6
    8a84:	0008e280 	call	8e28 <__mulsi3>
    8a88:	d9400317 	ldw	r5,12(sp)
    8a8c:	d9000017 	ldw	r4,0(sp)
    8a90:	1023883a 	mov	r17,r2
    8a94:	0008e280 	call	8e28 <__mulsi3>
    8a98:	14cb883a 	add	r5,r2,r19
    8a9c:	894b883a 	add	r5,r17,r5
    8aa0:	b005883a 	mov	r2,r22
    8aa4:	2807883a 	mov	r3,r5
    8aa8:	dfc00d17 	ldw	ra,52(sp)
    8aac:	df000c17 	ldw	fp,48(sp)
    8ab0:	ddc00b17 	ldw	r23,44(sp)
    8ab4:	dd800a17 	ldw	r22,40(sp)
    8ab8:	dd400917 	ldw	r21,36(sp)
    8abc:	dd000817 	ldw	r20,32(sp)
    8ac0:	dcc00717 	ldw	r19,28(sp)
    8ac4:	dc800617 	ldw	r18,24(sp)
    8ac8:	dc400517 	ldw	r17,20(sp)
    8acc:	dc000417 	ldw	r16,16(sp)
    8ad0:	dec00e04 	addi	sp,sp,56
    8ad4:	f800283a 	ret

00008ad8 <__clzsi2>:
    8ad8:	00bfffd4 	movui	r2,65535
    8adc:	11000e36 	bltu	r2,r4,8b18 <__clzsi2+0x40>
    8ae0:	00803fc4 	movi	r2,255
    8ae4:	01400204 	movi	r5,8
    8ae8:	0007883a 	mov	r3,zero
    8aec:	11001036 	bltu	r2,r4,8b30 <__clzsi2+0x58>
    8af0:	000b883a 	mov	r5,zero
    8af4:	20c6d83a 	srl	r3,r4,r3
    8af8:	00800074 	movhi	r2,1
    8afc:	10a47704 	addi	r2,r2,-28196
    8b00:	1887883a 	add	r3,r3,r2
    8b04:	18800003 	ldbu	r2,0(r3)
    8b08:	00c00804 	movi	r3,32
    8b0c:	2885883a 	add	r2,r5,r2
    8b10:	1885c83a 	sub	r2,r3,r2
    8b14:	f800283a 	ret
    8b18:	01400404 	movi	r5,16
    8b1c:	00804034 	movhi	r2,256
    8b20:	10bfffc4 	addi	r2,r2,-1
    8b24:	2807883a 	mov	r3,r5
    8b28:	113ff22e 	bgeu	r2,r4,8af4 <__clzsi2+0x1c>
    8b2c:	01400604 	movi	r5,24
    8b30:	2807883a 	mov	r3,r5
    8b34:	20c6d83a 	srl	r3,r4,r3
    8b38:	00800074 	movhi	r2,1
    8b3c:	10a47704 	addi	r2,r2,-28196
    8b40:	1887883a 	add	r3,r3,r2
    8b44:	18800003 	ldbu	r2,0(r3)
    8b48:	00c00804 	movi	r3,32
    8b4c:	2885883a 	add	r2,r5,r2
    8b50:	1885c83a 	sub	r2,r3,r2
    8b54:	f800283a 	ret

00008b58 <__pack_f>:
    8b58:	20c00017 	ldw	r3,0(r4)
    8b5c:	01c00044 	movi	r7,1
    8b60:	21800317 	ldw	r6,12(r4)
    8b64:	21400117 	ldw	r5,4(r4)
    8b68:	38c02d2e 	bgeu	r7,r3,8c20 <__pack_f+0xc8>
    8b6c:	00800104 	movi	r2,4
    8b70:	18802826 	beq	r3,r2,8c14 <__pack_f+0xbc>
    8b74:	00800084 	movi	r2,2
    8b78:	18800126 	beq	r3,r2,8b80 <__pack_f+0x28>
    8b7c:	3000101e 	bne	r6,zero,8bc0 <__pack_f+0x68>
    8b80:	000d883a 	mov	r6,zero
    8b84:	0007883a 	mov	r3,zero
    8b88:	19003fcc 	andi	r4,r3,255
    8b8c:	200895fa 	slli	r4,r4,23
    8b90:	00c02034 	movhi	r3,128
    8b94:	18ffffc4 	addi	r3,r3,-1
    8b98:	30c6703a 	and	r3,r6,r3
    8b9c:	10a0002c 	andhi	r2,r2,32768
    8ba0:	10c4b03a 	or	r2,r2,r3
    8ba4:	280a97fa 	slli	r5,r5,31
    8ba8:	1104b03a 	or	r2,r2,r4
    8bac:	00e00034 	movhi	r3,32768
    8bb0:	18ffffc4 	addi	r3,r3,-1
    8bb4:	10c4703a 	and	r2,r2,r3
    8bb8:	1144b03a 	or	r2,r2,r5
    8bbc:	f800283a 	ret
    8bc0:	21000217 	ldw	r4,8(r4)
    8bc4:	00bfe084 	movi	r2,-126
    8bc8:	20801b16 	blt	r4,r2,8c38 <__pack_f+0xe0>
    8bcc:	00801fc4 	movi	r2,127
    8bd0:	11001016 	blt	r2,r4,8c14 <__pack_f+0xbc>
    8bd4:	308e703a 	and	r7,r6,r2
    8bd8:	2087883a 	add	r3,r4,r2
    8bdc:	00801004 	movi	r2,64
    8be0:	38800526 	beq	r7,r2,8bf8 <__pack_f+0xa0>
    8be4:	31800fc4 	addi	r6,r6,63
    8be8:	30000716 	blt	r6,zero,8c08 <__pack_f+0xb0>
    8bec:	300490ba 	slli	r2,r6,2
    8bf0:	100cd27a 	srli	r6,r2,9
    8bf4:	003fe406 	br	8b88 <__pack_f+0x30>
    8bf8:	3080200c 	andi	r2,r6,128
    8bfc:	103ffa26 	beq	r2,zero,8be8 <__pack_f+0x90>
    8c00:	31cd883a 	add	r6,r6,r7
    8c04:	003ff806 	br	8be8 <__pack_f+0x90>
    8c08:	300cd07a 	srli	r6,r6,1
    8c0c:	18c00044 	addi	r3,r3,1
    8c10:	003ff606 	br	8bec <__pack_f+0x94>
    8c14:	000d883a 	mov	r6,zero
    8c18:	00ffffc4 	movi	r3,-1
    8c1c:	003fda06 	br	8b88 <__pack_f+0x30>
    8c20:	31800434 	orhi	r6,r6,16
    8c24:	00802034 	movhi	r2,128
    8c28:	10bfffc4 	addi	r2,r2,-1
    8c2c:	308c703a 	and	r6,r6,r2
    8c30:	00ffffc4 	movi	r3,-1
    8c34:	003fd406 	br	8b88 <__pack_f+0x30>
    8c38:	1109c83a 	sub	r4,r2,r4
    8c3c:	00800644 	movi	r2,25
    8c40:	11001216 	blt	r2,r4,8c8c <__pack_f+0x134>
    8c44:	3904983a 	sll	r2,r7,r4
    8c48:	3106d83a 	srl	r3,r6,r4
    8c4c:	10bfffc4 	addi	r2,r2,-1
    8c50:	3084703a 	and	r2,r6,r2
    8c54:	1004c03a 	cmpne	r2,r2,zero
    8c58:	1886b03a 	or	r3,r3,r2
    8c5c:	19001fcc 	andi	r4,r3,127
    8c60:	00801004 	movi	r2,64
    8c64:	20800c26 	beq	r4,r2,8c98 <__pack_f+0x140>
    8c68:	18c00fc4 	addi	r3,r3,63
    8c6c:	00900034 	movhi	r2,16384
    8c70:	10bfffc4 	addi	r2,r2,-1
    8c74:	180cd1fa 	srli	r6,r3,7
    8c78:	10c7803a 	cmpltu	r3,r2,r3
    8c7c:	00802034 	movhi	r2,128
    8c80:	10bfffc4 	addi	r2,r2,-1
    8c84:	308c703a 	and	r6,r6,r2
    8c88:	003fbf06 	br	8b88 <__pack_f+0x30>
    8c8c:	0007883a 	mov	r3,zero
    8c90:	000d883a 	mov	r6,zero
    8c94:	003ff906 	br	8c7c <__pack_f+0x124>
    8c98:	1880200c 	andi	r2,r3,128
    8c9c:	10000126 	beq	r2,zero,8ca4 <__pack_f+0x14c>
    8ca0:	1907883a 	add	r3,r3,r4
    8ca4:	180cd1fa 	srli	r6,r3,7
    8ca8:	00900034 	movhi	r2,16384
    8cac:	10bfffc4 	addi	r2,r2,-1
    8cb0:	10c7803a 	cmpltu	r3,r2,r3
    8cb4:	003ff106 	br	8c7c <__pack_f+0x124>

00008cb8 <__unpack_f>:
    8cb8:	21800017 	ldw	r6,0(r4)
    8cbc:	00c02034 	movhi	r3,128
    8cc0:	18ffffc4 	addi	r3,r3,-1
    8cc4:	3004d5fa 	srli	r2,r6,23
    8cc8:	3008d7fa 	srli	r4,r6,31
    8ccc:	30ce703a 	and	r7,r6,r3
    8cd0:	10c03fcc 	andi	r3,r2,255
    8cd4:	29000115 	stw	r4,4(r5)
    8cd8:	1800131e 	bne	r3,zero,8d28 <__unpack_f+0x70>
    8cdc:	38000f26 	beq	r7,zero,8d1c <__unpack_f+0x64>
    8ce0:	380691fa 	slli	r3,r7,7
    8ce4:	01bfe084 	movi	r6,-126
    8ce8:	008000c4 	movi	r2,3
    8cec:	01100034 	movhi	r4,16384
    8cf0:	213fffc4 	addi	r4,r4,-1
    8cf4:	28800015 	stw	r2,0(r5)
    8cf8:	29800215 	stw	r6,8(r5)
    8cfc:	20c00536 	bltu	r4,r3,8d14 <__unpack_f+0x5c>
    8d00:	3005883a 	mov	r2,r6
    8d04:	18c7883a 	add	r3,r3,r3
    8d08:	10bfffc4 	addi	r2,r2,-1
    8d0c:	20fffd2e 	bgeu	r4,r3,8d04 <__unpack_f+0x4c>
    8d10:	28800215 	stw	r2,8(r5)
    8d14:	28c00315 	stw	r3,12(r5)
    8d18:	f800283a 	ret
    8d1c:	00800084 	movi	r2,2
    8d20:	28800015 	stw	r2,0(r5)
    8d24:	f800283a 	ret
    8d28:	00803fc4 	movi	r2,255
    8d2c:	18800826 	beq	r3,r2,8d50 <__unpack_f+0x98>
    8d30:	380491fa 	slli	r2,r7,7
    8d34:	18ffe044 	addi	r3,r3,-127
    8d38:	28c00215 	stw	r3,8(r5)
    8d3c:	10900034 	orhi	r2,r2,16384
    8d40:	28800315 	stw	r2,12(r5)
    8d44:	008000c4 	movi	r2,3
    8d48:	28800015 	stw	r2,0(r5)
    8d4c:	f800283a 	ret
    8d50:	3800031e 	bne	r7,zero,8d60 <__unpack_f+0xa8>
    8d54:	00800104 	movi	r2,4
    8d58:	28800015 	stw	r2,0(r5)
    8d5c:	f800283a 	ret
    8d60:	3080042c 	andhi	r2,r6,16
    8d64:	10000426 	beq	r2,zero,8d78 <__unpack_f+0xc0>
    8d68:	00800044 	movi	r2,1
    8d6c:	28800015 	stw	r2,0(r5)
    8d70:	29c00315 	stw	r7,12(r5)
    8d74:	f800283a 	ret
    8d78:	28000015 	stw	zero,0(r5)
    8d7c:	003ffc06 	br	8d70 <__unpack_f+0xb8>

00008d80 <__fpcmp_parts_f>:
    8d80:	21800017 	ldw	r6,0(r4)
    8d84:	00c00044 	movi	r3,1
    8d88:	19800a2e 	bgeu	r3,r6,8db4 <__fpcmp_parts_f+0x34>
    8d8c:	28800017 	ldw	r2,0(r5)
    8d90:	1880082e 	bgeu	r3,r2,8db4 <__fpcmp_parts_f+0x34>
    8d94:	00c00104 	movi	r3,4
    8d98:	30c01e26 	beq	r6,r3,8e14 <__fpcmp_parts_f+0x94>
    8d9c:	10c01a26 	beq	r2,r3,8e08 <__fpcmp_parts_f+0x88>
    8da0:	00c00084 	movi	r3,2
    8da4:	30c00526 	beq	r6,r3,8dbc <__fpcmp_parts_f+0x3c>
    8da8:	10c0071e 	bne	r2,r3,8dc8 <__fpcmp_parts_f+0x48>
    8dac:	20800117 	ldw	r2,4(r4)
    8db0:	1000091e 	bne	r2,zero,8dd8 <__fpcmp_parts_f+0x58>
    8db4:	00800044 	movi	r2,1
    8db8:	f800283a 	ret
    8dbc:	10c0121e 	bne	r2,r3,8e08 <__fpcmp_parts_f+0x88>
    8dc0:	0005883a 	mov	r2,zero
    8dc4:	f800283a 	ret
    8dc8:	20c00117 	ldw	r3,4(r4)
    8dcc:	28800117 	ldw	r2,4(r5)
    8dd0:	18800326 	beq	r3,r2,8de0 <__fpcmp_parts_f+0x60>
    8dd4:	183ff726 	beq	r3,zero,8db4 <__fpcmp_parts_f+0x34>
    8dd8:	00bfffc4 	movi	r2,-1
    8ddc:	f800283a 	ret
    8de0:	21800217 	ldw	r6,8(r4)
    8de4:	28800217 	ldw	r2,8(r5)
    8de8:	11bffa16 	blt	r2,r6,8dd4 <__fpcmp_parts_f+0x54>
    8dec:	30800416 	blt	r6,r2,8e00 <__fpcmp_parts_f+0x80>
    8df0:	21000317 	ldw	r4,12(r4)
    8df4:	29400317 	ldw	r5,12(r5)
    8df8:	293ff636 	bltu	r5,r4,8dd4 <__fpcmp_parts_f+0x54>
    8dfc:	217ff02e 	bgeu	r4,r5,8dc0 <__fpcmp_parts_f+0x40>
    8e00:	183fec1e 	bne	r3,zero,8db4 <__fpcmp_parts_f+0x34>
    8e04:	003ff406 	br	8dd8 <__fpcmp_parts_f+0x58>
    8e08:	28800117 	ldw	r2,4(r5)
    8e0c:	103fe91e 	bne	r2,zero,8db4 <__fpcmp_parts_f+0x34>
    8e10:	003ff106 	br	8dd8 <__fpcmp_parts_f+0x58>
    8e14:	11bfe51e 	bne	r2,r6,8dac <__fpcmp_parts_f+0x2c>
    8e18:	28c00117 	ldw	r3,4(r5)
    8e1c:	20800117 	ldw	r2,4(r4)
    8e20:	1885c83a 	sub	r2,r3,r2
    8e24:	f800283a 	ret

00008e28 <__mulsi3>:
    8e28:	20000a26 	beq	r4,zero,8e54 <__mulsi3+0x2c>
    8e2c:	0007883a 	mov	r3,zero
    8e30:	2080004c 	andi	r2,r4,1
    8e34:	1005003a 	cmpeq	r2,r2,zero
    8e38:	2008d07a 	srli	r4,r4,1
    8e3c:	1000011e 	bne	r2,zero,8e44 <__mulsi3+0x1c>
    8e40:	1947883a 	add	r3,r3,r5
    8e44:	294b883a 	add	r5,r5,r5
    8e48:	203ff91e 	bne	r4,zero,8e30 <__mulsi3+0x8>
    8e4c:	1805883a 	mov	r2,r3
    8e50:	f800283a 	ret
    8e54:	0007883a 	mov	r3,zero
    8e58:	1805883a 	mov	r2,r3
    8e5c:	f800283a 	ret

00008e60 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8e60:	2900051e 	bne	r5,r4,8e78 <alt_load_section+0x18>
    8e64:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8e68:	20800017 	ldw	r2,0(r4)
    8e6c:	21000104 	addi	r4,r4,4
    8e70:	28800015 	stw	r2,0(r5)
    8e74:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8e78:	29bffb1e 	bne	r5,r6,8e68 <alt_load_section+0x8>
    8e7c:	f800283a 	ret

00008e80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e80:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8e84:	01000074 	movhi	r4,1
    8e88:	2124b804 	addi	r4,r4,-27936
    8e8c:	01400074 	movhi	r5,1
    8e90:	2964b704 	addi	r5,r5,-27940
    8e94:	01800074 	movhi	r6,1
    8e98:	31a4b804 	addi	r6,r6,-27936
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8e9c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8ea0:	0008e600 	call	8e60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8ea4:	01000074 	movhi	r4,1
    8ea8:	21200804 	addi	r4,r4,-32736
    8eac:	01400074 	movhi	r5,1
    8eb0:	29600804 	addi	r5,r5,-32736
    8eb4:	01800074 	movhi	r6,1
    8eb8:	31a00804 	addi	r6,r6,-32736
    8ebc:	0008e600 	call	8e60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8ec0:	01000074 	movhi	r4,1
    8ec4:	21246d04 	addi	r4,r4,-28236
    8ec8:	01400074 	movhi	r5,1
    8ecc:	29646d04 	addi	r5,r5,-28236
    8ed0:	01800074 	movhi	r6,1
    8ed4:	31a4b704 	addi	r6,r6,-27940
    8ed8:	0008e600 	call	8e60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8edc:	00090380 	call	9038 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8ee0:	dfc00017 	ldw	ra,0(sp)
    8ee4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8ee8:	000903c1 	jmpi	903c <alt_icache_flush_all>

00008eec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8eec:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ef0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8ef4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8ef8:	0008f580 	call	8f58 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8efc:	0008f540 	call	8f54 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8f00:	d1200217 	ldw	r4,-32760(gp)
    8f04:	d1600317 	ldw	r5,-32756(gp)
    8f08:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8f0c:	dfc00017 	ldw	ra,0(sp)
    8f10:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8f14:	000805c1 	jmpi	805c <main>

00008f18 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8f18:	defffe04 	addi	sp,sp,-8
    8f1c:	dc000015 	stw	r16,0(sp)
    8f20:	dfc00115 	stw	ra,4(sp)
    8f24:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8f28:	00090480 	call	9048 <strlen>
    8f2c:	800b883a 	mov	r5,r16
    8f30:	100d883a 	mov	r6,r2
    8f34:	01000074 	movhi	r4,1
    8f38:	2124b704 	addi	r4,r4,-27940
    8f3c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    8f40:	dfc00117 	ldw	ra,4(sp)
    8f44:	dc000017 	ldw	r16,0(sp)
    8f48:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8f4c:	0008f781 	jmpi	8f78 <altera_avalon_jtag_uart_write>

00008f50 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    8f50:	0008fac1 	jmpi	8fac <alt_busy_sleep>

00008f54 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
}
    8f54:	f800283a 	ret

00008f58 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8f58:	deffff04 	addi	sp,sp,-4
    8f5c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    8f60:	00090400 	call	9040 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8f64:	00800044 	movi	r2,1
    8f68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8f6c:	dfc00017 	ldw	ra,0(sp)
    8f70:	dec00104 	addi	sp,sp,4
    8f74:	f800283a 	ret

00008f78 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8f78:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    8f7c:	298f883a 	add	r7,r5,r6
    8f80:	20c00104 	addi	r3,r4,4
    8f84:	00000606 	br	8fa0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8f88:	18800037 	ldwio	r2,0(r3)
    8f8c:	10bfffec 	andhi	r2,r2,65535
    8f90:	10000326 	beq	r2,zero,8fa0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8f94:	28800007 	ldb	r2,0(r5)
    8f98:	29400044 	addi	r5,r5,1
    8f9c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8fa0:	29fff936 	bltu	r5,r7,8f88 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8fa4:	3005883a 	mov	r2,r6
    8fa8:	f800283a 	ret

00008fac <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8fac:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8fb0:	014666b4 	movhi	r5,6554
    8fb4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8fb8:	dc000015 	stw	r16,0(sp)
    8fbc:	dfc00115 	stw	ra,4(sp)
    8fc0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8fc4:	00091a40 	call	91a4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8fc8:	10001126 	beq	r2,zero,9010 <alt_busy_sleep+0x64>
    8fcc:	0007883a 	mov	r3,zero
    8fd0:	01200034 	movhi	r4,32768
    8fd4:	213fffc4 	addi	r4,r4,-1
    8fd8:	017999b4 	movhi	r5,58982
    8fdc:	295999c4 	addi	r5,r5,26215
    8fe0:	00000406 	br	8ff4 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8fe4:	213fffc4 	addi	r4,r4,-1
    8fe8:	203ffe1e 	bne	r4,zero,8fe4 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8fec:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    8ff0:	18c00044 	addi	r3,r3,1
    8ff4:	18bffb16 	blt	r3,r2,8fe4 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8ff8:	8009883a 	mov	r4,r16
    8ffc:	01400144 	movi	r5,5
    9000:	0008e280 	call	8e28 <__mulsi3>
    9004:	10bfffc4 	addi	r2,r2,-1
    9008:	103ffe1e 	bne	r2,zero,9004 <alt_busy_sleep+0x58>
    900c:	00000506 	br	9024 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9010:	8009883a 	mov	r4,r16
    9014:	01400144 	movi	r5,5
    9018:	0008e280 	call	8e28 <__mulsi3>
    901c:	10bfffc4 	addi	r2,r2,-1
    9020:	00bffe16 	blt	zero,r2,901c <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    9024:	0005883a 	mov	r2,zero
    9028:	dfc00117 	ldw	ra,4(sp)
    902c:	dc000017 	ldw	r16,0(sp)
    9030:	dec00204 	addi	sp,sp,8
    9034:	f800283a 	ret

00009038 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9038:	f800283a 	ret

0000903c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    903c:	f800283a 	ret

00009040 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9040:	000170fa 	wrctl	ienable,zero
}
    9044:	f800283a 	ret

00009048 <strlen>:
    9048:	20800007 	ldb	r2,0(r4)
    904c:	10000526 	beq	r2,zero,9064 <strlen+0x1c>
    9050:	2007883a 	mov	r3,r4
    9054:	18c00044 	addi	r3,r3,1
    9058:	18800007 	ldb	r2,0(r3)
    905c:	103ffd1e 	bne	r2,zero,9054 <strlen+0xc>
    9060:	1905c83a 	sub	r2,r3,r4
    9064:	f800283a 	ret

00009068 <udivmodsi4>:
    9068:	29001b2e 	bgeu	r5,r4,90d8 <udivmodsi4+0x70>
    906c:	28001a16 	blt	r5,zero,90d8 <udivmodsi4+0x70>
    9070:	00800044 	movi	r2,1
    9074:	0007883a 	mov	r3,zero
    9078:	01c007c4 	movi	r7,31
    907c:	00000306 	br	908c <udivmodsi4+0x24>
    9080:	19c01326 	beq	r3,r7,90d0 <udivmodsi4+0x68>
    9084:	18c00044 	addi	r3,r3,1
    9088:	28000416 	blt	r5,zero,909c <udivmodsi4+0x34>
    908c:	294b883a 	add	r5,r5,r5
    9090:	1085883a 	add	r2,r2,r2
    9094:	293ffa36 	bltu	r5,r4,9080 <udivmodsi4+0x18>
    9098:	10000d26 	beq	r2,zero,90d0 <udivmodsi4+0x68>
    909c:	0007883a 	mov	r3,zero
    90a0:	21400236 	bltu	r4,r5,90ac <udivmodsi4+0x44>
    90a4:	2149c83a 	sub	r4,r4,r5
    90a8:	1886b03a 	or	r3,r3,r2
    90ac:	1004d07a 	srli	r2,r2,1
    90b0:	280ad07a 	srli	r5,r5,1
    90b4:	103ffa1e 	bne	r2,zero,90a0 <udivmodsi4+0x38>
    90b8:	30000226 	beq	r6,zero,90c4 <udivmodsi4+0x5c>
    90bc:	2005883a 	mov	r2,r4
    90c0:	f800283a 	ret
    90c4:	1809883a 	mov	r4,r3
    90c8:	2005883a 	mov	r2,r4
    90cc:	f800283a 	ret
    90d0:	0007883a 	mov	r3,zero
    90d4:	003ff806 	br	90b8 <udivmodsi4+0x50>
    90d8:	00800044 	movi	r2,1
    90dc:	0007883a 	mov	r3,zero
    90e0:	003fef06 	br	90a0 <udivmodsi4+0x38>

000090e4 <__divsi3>:
    90e4:	defffe04 	addi	sp,sp,-8
    90e8:	dc000015 	stw	r16,0(sp)
    90ec:	dfc00115 	stw	ra,4(sp)
    90f0:	0021883a 	mov	r16,zero
    90f4:	20000c16 	blt	r4,zero,9128 <__divsi3+0x44>
    90f8:	000d883a 	mov	r6,zero
    90fc:	28000e16 	blt	r5,zero,9138 <__divsi3+0x54>
    9100:	00090680 	call	9068 <udivmodsi4>
    9104:	1007883a 	mov	r3,r2
    9108:	8005003a 	cmpeq	r2,r16,zero
    910c:	1000011e 	bne	r2,zero,9114 <__divsi3+0x30>
    9110:	00c7c83a 	sub	r3,zero,r3
    9114:	1805883a 	mov	r2,r3
    9118:	dfc00117 	ldw	ra,4(sp)
    911c:	dc000017 	ldw	r16,0(sp)
    9120:	dec00204 	addi	sp,sp,8
    9124:	f800283a 	ret
    9128:	0109c83a 	sub	r4,zero,r4
    912c:	04000044 	movi	r16,1
    9130:	000d883a 	mov	r6,zero
    9134:	283ff20e 	bge	r5,zero,9100 <__divsi3+0x1c>
    9138:	014bc83a 	sub	r5,zero,r5
    913c:	8021003a 	cmpeq	r16,r16,zero
    9140:	003fef06 	br	9100 <__divsi3+0x1c>

00009144 <__modsi3>:
    9144:	deffff04 	addi	sp,sp,-4
    9148:	dfc00015 	stw	ra,0(sp)
    914c:	01800044 	movi	r6,1
    9150:	2807883a 	mov	r3,r5
    9154:	20000416 	blt	r4,zero,9168 <__modsi3+0x24>
    9158:	28000c16 	blt	r5,zero,918c <__modsi3+0x48>
    915c:	dfc00017 	ldw	ra,0(sp)
    9160:	dec00104 	addi	sp,sp,4
    9164:	00090681 	jmpi	9068 <udivmodsi4>
    9168:	0109c83a 	sub	r4,zero,r4
    916c:	28000b16 	blt	r5,zero,919c <__modsi3+0x58>
    9170:	180b883a 	mov	r5,r3
    9174:	01800044 	movi	r6,1
    9178:	00090680 	call	9068 <udivmodsi4>
    917c:	0085c83a 	sub	r2,zero,r2
    9180:	dfc00017 	ldw	ra,0(sp)
    9184:	dec00104 	addi	sp,sp,4
    9188:	f800283a 	ret
    918c:	014bc83a 	sub	r5,zero,r5
    9190:	dfc00017 	ldw	ra,0(sp)
    9194:	dec00104 	addi	sp,sp,4
    9198:	00090681 	jmpi	9068 <udivmodsi4>
    919c:	0147c83a 	sub	r3,zero,r5
    91a0:	003ff306 	br	9170 <__modsi3+0x2c>

000091a4 <__udivsi3>:
    91a4:	000d883a 	mov	r6,zero
    91a8:	00090681 	jmpi	9068 <udivmodsi4>

000091ac <__umodsi3>:
    91ac:	01800044 	movi	r6,1
    91b0:	00090681 	jmpi	9068 <udivmodsi4>
